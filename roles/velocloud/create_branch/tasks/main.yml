---
# ************Tasks file for velocloud "configurationId" *******************

# **************************************************************************
#       Login with enterprise Profile
# **************************************************************************
- name: Login with enterprise Profile
  vars:
    body: "{{ lookup('template','../files/loginRequest.txt') }}"
  uri:
    url: "{{ veloURL }}/login/enterpriseLogin"
    method: POST
    body: "{{ body }}"
    force_basic_auth: yes
    status_code: 200
    body_format: raw
    validate_certs: false
    return_content: yes
    headers:
      Content-Type: "application/x-www-form-urlencoded"
  register: response
- set_fact:
    cookies_id: "culture=en-US;velocloud.session={{ (response.cookies| length > 0) | ternary(response.cookies['velocloud.session'], 'empty') }}"
- debug:
    msg: " Logged in successfully!!"

# **************************************************************************
#       Segment enterprise Profile
# **************************************************************************
- name: Get Segment settings Module
  vars:
    ec2_security_group_names: ""
- set_fact:
   ec2_security_group_names: "{{ ec2_security_group_names }}{{lookup('template','../files/vlantemplate.json') | to_json }}{{'-'}}"
  with_items: "{{ segments }}"
 
# **************************************************************************
#       Get Enterprise Profile
# **************************************************************************
- name: Get Enterprise Profile
  uri:
    url: "{{ veloURL }}/enterprise/getEnterprise"
    method: POST
    body: '{}'
    status_code: 200
    body_format: json
    force_basic_auth: yes
    validate_certs: false
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Cookie: "{{ cookies_id }}" 
  register: response
- set_fact:
    enterprise_Id: "{{ response.json.id | int }}" 
- debug:
    msg: "{{  enterprise_Id }}"

# **************************************************************************
#        Get Configurations from enterprise Profile
# **************************************************************************
- name: Get Config id from enterprise Profile
  vars:
    body: "{{ lookup('template','../files/getEnterpriseConfRequest.json') | to_json }}"
  uri:
    url: "{{ veloURL }}/enterprise/getEnterpriseConfigurations"
    method: POST
    body: "{{ body }}"
    force_basic_auth: yes
    status_code: 200
    body_format: json
    validate_certs: no
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Cookie: "{{ cookies_id }}"
  register: response
- set_fact:
    configurationId: "{{ item.id }}" 
  with_items: "{{ response.json }}"
  when: item.name == 'POC Profile'
- debug:
    msg: "Profile id for vpn profile-   {{  response.json[2].name }} is {{ configurationId }} "

# **************************************************************************
#       Provision the Edge Device
# **************************************************************************
- name: Provision Edge Device
  vars:
    body: "{{ lookup('template','../files/edgeProvisionRequest.json') | to_json }}"
  uri:
    url: "{{ veloURL }}/edge/edgeProvision"
    method: POST
    body: "{{ body }}"
    force_basic_auth: yes
    status_code: 200
    body_format: json
    validate_certs: no
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Cookie: "{{ cookies_id }}"
  register: response
- set_fact:
    velo_edge_id: "{{ response.json.id }}"
- debug:
    var: velo_edge_id

# **************************************************************************
#       Configrution for Edge Device provisioned
# **************************************************************************
- name: Get Configrution id for Edge Device provisioned
  vars:
    body: '{"enterpriseId": {{ enterpriseId }},"edgeId": "{{ velo_edge_id }}" }'
  uri:
    url: "{{ veloURL }}/edge/getEdgeConfigurationStack"
    method: POST
    body: "{{ body }}"
    status_code: 200
    body_format: json
    validate_certs: no
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Cookie: "{{ cookies_id }}"
  register: response
- set_fact:
   velo_edge_config_id: "{{ response.json[0].id }}"
- set_fact:
   velo_edge_devicesetting_module_id: "{{ item.id }}"
  with_items: "{{ response.json[0].modules }}"
  when: item.name == 'deviceSettings'
- debug:
   msg: "Edge segment - {{ velo_edge_config_id }} -  Provisioned with devsetting_moduleid - {{ velo_edge_devicesetting_module_id }} "

# **************************************************************************
#       Device setting Module enterprise Profiles
# **************************************************************************
- name: Update Devicesetting Module data for Edge
  vars:
    body: "{{ lookup('template','../files/updateDeviceSettingsModuleRequest.json') | to_json }}"
  uri:
    url: "{{ veloURL }}/configuration/updateConfigurationModule"
    method: POST
    body: "{{ body }}"
    status_code: 200
    body_format: json
    validate_certs: no
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Cookie: "{{ cookies_id }}"
  register: response
- debug:
   msg: "updatted deveicesetting {{ response.content }} "
# **************************************************************************
#       Login out with enterprise Profile
# **************************************************************************
- name: Logout
  uri:
     url: "{{ veloURL }}/logout"
     method: POST
     status_code: 200
     validate_certs: false
     headers:
       Cookie: "{{ cookies_id }}"
       Content-Type: "application/json"
  register: res
- debug:
   msg: " Logging out {{ res }} "